services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - ids-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
    networks:
      - ids-network
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1

  kafkahq:
    image: tchiotludo/kafkahq
    hostname: kafkahq
    container_name: kafkahq
    ports:
      - "8082:8080"
    networks:
      - ids-network
    depends_on:
      - kafka
    environment:
      KAFKAHQ_CONFIGURATION: |
        kafkahq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"

  ksql-server:
    image: confluentinc/cp-ksqldb-server:7.8.1
    container_name: ksql-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    networks:
      - ids-network
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_HOST_NAME: ksql-server
      KSQL_APPLICATION_ID: "ksql-ids"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_SERVER_UI_ENABLED: "false"

  ksql-cli:
    image: confluentinc/cp-ksqldb-cli:7.8.1
    hostname: ksql-cli
    container_name: ksql-cli
    depends_on:
      - kafka
      - ksql-server
    networks:
      - ids-network
    entrypoint: /bin/sh
    tty: true

  netlogdivies:
    image: recedivies09/netlogdivies:latest
    container_name: netlogdivies
    hostname: netlogdivies
    command:
      [
        "/wait-for-it.sh",
        "kafka:9092",
        "--",
        "./netlogdivies",
        "-i",
        "/wednesday_test.pcap",
        "-f",
        "tcp or udp",
        "--sender",
        "kafka",
        "--broker",
        "kafka:9092",
        "--topic",
        "network-traffic",
        "--mode",
        "ordered",
      ]
    depends_on:
      - kafka
    volumes:
      - /mnt/extra/datasets/processed/wednesday_test.pcap:/wednesday_test.pcap
    networks:
      - ids-network

networks:
  ids-network:
